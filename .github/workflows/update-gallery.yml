name: Update Gallery JSON (Newest First)

on:
  push:
    paths:
      - 'Assets/gallery/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-gallery:
    # allow manual runs; skip runs triggered by the workflow's own `[skip ci]` commit
    if: github.event_name == 'workflow_dispatch' || (github.event.head_commit != null && !contains(github.event.head_commit.message, '[skip ci]'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git author
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "action@github.com"

      - name: Generate gallery.json (newest-first)
        run: |
          python3 - << 'PY'
          import os, json, subprocess
          GALLERY_DIR = os.path.join("Assets","gallery")
          exts = {".jpg",".jpeg",".png",".gif",".webp",".avif"}

          entries = []
          if os.path.isdir(GALLERY_DIR):
            for name in os.listdir(GALLERY_DIR):
              p = os.path.join(GALLERY_DIR, name)
              ext = os.path.splitext(name)[1].lower()
              if os.path.isfile(p) and ext in exts:
                try:
                  ts = int(subprocess.check_output(["git","log","-1","--format=%ct","--",p], text=True).strip() or "0")
                except Exception:
                  ts = 0
                entries.append((ts, f"Assets/gallery/{name}"))

          entries.sort(key=lambda x: x[0], reverse=True)
          out = [path for _, path in entries]

          os.makedirs(GALLERY_DIR, exist_ok=True)
          with open(os.path.join(GALLERY_DIR, "gallery.json"), "w") as f:
            json.dump(out, f, indent=2)

          print(f"Wrote {len(out)} items to Assets/gallery/gallery.json")
          PY

      - name: Commit changes (if any)
        run: |
          git add Assets/gallery/gallery.json || true
          git diff --staged --quiet || git commit -m "Auto-update gallery.json [skip ci]"

      - name: Push changes
        run: |
          git pull --rebase origin ${{ github.ref_name }}
          git push origin HEAD:${{ github.ref_name }}

